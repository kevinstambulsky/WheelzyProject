// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Wheelzy.Data;

#nullable disable

namespace WheelzyProject.Migrations
{
    [DbContext(typeof(WheelzyDbContext))]
    [Migration("20250905202625_AddOrders")]
    partial class AddOrders
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WheelzyProject.Data.Models.Buyer", b =>
                {
                    b.Property<int>("BuyerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BuyerId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("BuyerId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Buyers");
                });

            modelBuilder.Entity("WheelzyProject.Data.Models.BuyerZipQuote", b =>
                {
                    b.Property<int>("BuyerId")
                        .HasColumnType("int");

                    b.Property<string>("ZipCode")
                        .HasColumnType("char(5)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.HasKey("BuyerId", "ZipCode");

                    b.HasIndex("ZipCode")
                        .HasDatabaseName("IX_BuyerZipQuote_Zip");

                    b.ToTable("BuyerZipQuotes");
                });

            modelBuilder.Entity("WheelzyProject.Data.Models.Car", b =>
                {
                    b.Property<int>("CarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CarId"));

                    b.Property<int>("MakeId")
                        .HasColumnType("int");

                    b.Property<int>("ModelId")
                        .HasColumnType("int");

                    b.Property<int?>("SubmodelId")
                        .HasColumnType("int");

                    b.Property<short>("Year")
                        .HasColumnType("smallint");

                    b.HasKey("CarId");

                    b.HasIndex("MakeId");

                    b.HasIndex("ModelId");

                    b.HasIndex("SubmodelId");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("WheelzyProject.Data.Models.CarMake", b =>
                {
                    b.Property<int>("MakeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MakeId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("MakeId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("CarMakes");
                });

            modelBuilder.Entity("WheelzyProject.Data.Models.CarModel", b =>
                {
                    b.Property<int>("ModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ModelId"));

                    b.Property<int>("MakeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ModelId");

                    b.HasIndex("MakeId", "Name")
                        .IsUnique();

                    b.ToTable("CarModels");
                });

            modelBuilder.Entity("WheelzyProject.Data.Models.CarSubmodel", b =>
                {
                    b.Property<int>("SubmodelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubmodelId"));

                    b.Property<int>("ModelId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("SubmodelId");

                    b.HasIndex("ModelId", "Name")
                        .IsUnique();

                    b.ToTable("CarSubmodels");
                });

            modelBuilder.Entity("WheelzyProject.Data.Models.Case", b =>
                {
                    b.Property<int>("CaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CaseId"));

                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("char(5)");

                    b.HasKey("CaseId");

                    b.HasIndex("CarId");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("IX_Case_Customer");

                    b.HasIndex("ZipCode")
                        .HasDatabaseName("IX_Case_Zip");

                    b.ToTable("Case", (string)null);
                });

            modelBuilder.Entity("WheelzyProject.Data.Models.CaseQuote", b =>
                {
                    b.Property<long>("CaseQuoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CaseQuoteId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("BuyerId")
                        .HasColumnType("int");

                    b.Property<int>("CaseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.Property<bool>("IsCurrent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("CaseQuoteId");

                    b.HasIndex("BuyerId");

                    b.HasIndex("CaseId")
                        .IsUnique()
                        .HasDatabaseName("UX_CaseQuote_CurrentPerCase")
                        .HasFilter("[IsCurrent] = 1");

                    b.HasIndex("CaseId", "BuyerId")
                        .IsUnique();

                    b.ToTable("CaseQuotes");
                });

            modelBuilder.Entity("WheelzyProject.Data.Models.CaseStatus", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("RequiresStatusDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("StatusId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("CaseStatuses");
                });

            modelBuilder.Entity("WheelzyProject.Data.Models.CaseStatusHistory", b =>
                {
                    b.Property<long>("CaseStatusHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CaseStatusHistoryId"));

                    b.Property<int>("CaseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ChangedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.Property<string>("ChangedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCurrent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("StatusDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("CaseStatusHistoryId");

                    b.HasIndex("CaseId")
                        .IsUnique()
                        .HasDatabaseName("UX_CaseStatusHistory_CurrentPerCase")
                        .HasFilter("[IsCurrent] = 1");

                    b.HasIndex("StatusId");

                    b.ToTable("CaseStatusHistories");
                });

            modelBuilder.Entity("WheelzyProject.Data.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("WheelzyProject.Data.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("StatusId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("WheelzyProject.Data.Models.OrderStatus", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("StatusId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("OrderStatuses");
                });

            modelBuilder.Entity("WheelzyProject.Data.Models.ZipCode", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("char(5)")
                        .HasColumnName("ZipCode");

                    b.HasKey("Code");

                    b.ToTable("ZipCodes");
                });

            modelBuilder.Entity("WheelzyProject.Data.Models.BuyerZipQuote", b =>
                {
                    b.HasOne("WheelzyProject.Data.Models.Buyer", "Buyer")
                        .WithMany()
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WheelzyProject.Data.Models.ZipCode", "Zip")
                        .WithMany()
                        .HasForeignKey("ZipCode")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Buyer");

                    b.Navigation("Zip");
                });

            modelBuilder.Entity("WheelzyProject.Data.Models.Car", b =>
                {
                    b.HasOne("WheelzyProject.Data.Models.CarMake", "Make")
                        .WithMany()
                        .HasForeignKey("MakeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WheelzyProject.Data.Models.CarModel", "Model")
                        .WithMany()
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WheelzyProject.Data.Models.CarSubmodel", "Submodel")
                        .WithMany()
                        .HasForeignKey("SubmodelId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Make");

                    b.Navigation("Model");

                    b.Navigation("Submodel");
                });

            modelBuilder.Entity("WheelzyProject.Data.Models.CarModel", b =>
                {
                    b.HasOne("WheelzyProject.Data.Models.CarMake", "Make")
                        .WithMany("Models")
                        .HasForeignKey("MakeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Make");
                });

            modelBuilder.Entity("WheelzyProject.Data.Models.CarSubmodel", b =>
                {
                    b.HasOne("WheelzyProject.Data.Models.CarModel", "Model")
                        .WithMany("Submodels")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Model");
                });

            modelBuilder.Entity("WheelzyProject.Data.Models.Case", b =>
                {
                    b.HasOne("WheelzyProject.Data.Models.Car", "Car")
                        .WithMany()
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WheelzyProject.Data.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WheelzyProject.Data.Models.ZipCode", "Zip")
                        .WithMany()
                        .HasForeignKey("ZipCode")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("Customer");

                    b.Navigation("Zip");
                });

            modelBuilder.Entity("WheelzyProject.Data.Models.CaseQuote", b =>
                {
                    b.HasOne("WheelzyProject.Data.Models.Buyer", "Buyer")
                        .WithMany()
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WheelzyProject.Data.Models.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Buyer");

                    b.Navigation("Case");
                });

            modelBuilder.Entity("WheelzyProject.Data.Models.CaseStatusHistory", b =>
                {
                    b.HasOne("WheelzyProject.Data.Models.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WheelzyProject.Data.Models.CaseStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Case");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("WheelzyProject.Data.Models.Order", b =>
                {
                    b.HasOne("WheelzyProject.Data.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WheelzyProject.Data.Models.OrderStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("WheelzyProject.Data.Models.CarMake", b =>
                {
                    b.Navigation("Models");
                });

            modelBuilder.Entity("WheelzyProject.Data.Models.CarModel", b =>
                {
                    b.Navigation("Submodels");
                });
#pragma warning restore 612, 618
        }
    }
}
